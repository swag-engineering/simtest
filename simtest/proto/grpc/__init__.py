# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: simtest.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class FunctionProgressEnum(betterproto.Enum):
    IDLE = 0
    RUNNING = 1
    FINISHED = 2


class FunctionStateEnum(betterproto.Enum):
    SUCCEED = 0
    FAILED = 1
    TERMINATED = 2


class LogLevelEnum(betterproto.Enum):
    DEBUG = 0
    INFO = 1
    WARNING = 2
    ERROR = 3
    CRITICAL = 4
    INTERNAL = 5


@dataclass(eq=False, repr=False)
class Empty(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StartTestsRequest(betterproto.Message):
    tests_bytes: bytes = betterproto.bytes_field(1)
    functions: List["TestFunction"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TestFunction(betterproto.Message):
    id: str = betterproto.string_field(1)
    node_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FunctionUpdate(betterproto.Message):
    test_id: str = betterproto.string_field(1)
    progress: "FunctionProgressEnum" = betterproto.enum_field(2)
    data: Optional["TestDataRecord"] = betterproto.message_field(
        3, optional=True, group="_data"
    )
    status: Optional["TestStatus"] = betterproto.message_field(
        4, optional=True, group="_status"
    )


@dataclass(eq=False, repr=False)
class TestDataRecord(betterproto.Message):
    timestamp: float = betterproto.double_field(1)
    inputs: Dict[str, float] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_DOUBLE
    )
    outputs: Dict[str, float] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_DOUBLE
    )
    log_messages: List["LogMessage"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class LogMessage(betterproto.Message):
    log_level: "LogLevelEnum" = betterproto.enum_field(1)
    text: str = betterproto.string_field(2)
    line_number: int = betterproto.uint32_field(3)
    file_location: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class TestStatus(betterproto.Message):
    state: "FunctionStateEnum" = betterproto.enum_field(1)
    fail_details: Optional["FailDetails"] = betterproto.message_field(
        2, optional=True, group="_fail_details"
    )
    """exists if state == FAILED"""

    internal_error: Optional[str] = betterproto.string_field(
        3, optional=True, group="_internal_error"
    )
    """exists if state == TERMINATED"""


@dataclass(eq=False, repr=False)
class FailDetails(betterproto.Message):
    exc_type: str = betterproto.string_field(1)
    text: str = betterproto.string_field(2)
    line_number: int = betterproto.uint32_field(3)
    file_location: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class InstallWheelPackageRequest(betterproto.Message):
    package_name: str = betterproto.string_field(1)
    package_bytes: bytes = betterproto.bytes_field(2)
    force_reinstall: bool = betterproto.bool_field(3)


class SimtestStub(betterproto.ServiceStub):
    async def install_wheel_package(
        self,
        install_wheel_package_request: "InstallWheelPackageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Empty":
        return await self._unary_unary(
            "/Simtest/InstallWheelPackage",
            install_wheel_package_request,
            Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_tests(
        self,
        start_tests_request: "StartTestsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["FunctionUpdate"]:
        async for response in self._unary_stream(
            "/Simtest/StartTests",
            start_tests_request,
            FunctionUpdate,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class SimtestBase(ServiceBase):
    async def install_wheel_package(
        self, install_wheel_package_request: "InstallWheelPackageRequest"
    ) -> "Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_tests(
        self, start_tests_request: "StartTestsRequest"
    ) -> AsyncIterator["FunctionUpdate"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_install_wheel_package(
        self, stream: "grpclib.server.Stream[InstallWheelPackageRequest, Empty]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.install_wheel_package(request)
        await stream.send_message(response)

    async def __rpc_start_tests(
        self, stream: "grpclib.server.Stream[StartTestsRequest, FunctionUpdate]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.start_tests,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/Simtest/InstallWheelPackage": grpclib.const.Handler(
                self.__rpc_install_wheel_package,
                grpclib.const.Cardinality.UNARY_UNARY,
                InstallWheelPackageRequest,
                Empty,
            ),
            "/Simtest/StartTests": grpclib.const.Handler(
                self.__rpc_start_tests,
                grpclib.const.Cardinality.UNARY_STREAM,
                StartTestsRequest,
                FunctionUpdate,
            ),
        }
